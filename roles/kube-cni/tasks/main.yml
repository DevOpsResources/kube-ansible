---

# ----------- If the restart has happened to recently
#             We need to wait for kubectl to return with a success.

- name: Wait until kubectl get pods is ready
  shell: >
    kubectl get pods --all-namespaces
  register: get_pods_result
  until: get_pods_result.rc == 0
  retries: 60
  delay: 3
  ignore_errors: yes

# ----------- bridge
- name: Configure bridge cni plugin
  shell: >
    kubectl create -f /etc/bridge.yaml
  args:
    creates: "{{ kubectl_home }}/.kubeadm-podnetwork-complete"
  when: pod_network_type == "bridge"

# ----------- flannel
- name: Apply the flannel RBAC
  shell: >
    kubectl create -f /etc/flannel-rbac.yaml
  args:
    creates: "{{ kubectl_home }}/.kubeadm-podnetwork-complete"
  when: >
    pod_network_type == "flannel"

- name: Apply the flannel podnetwork
  shell: >
    kubectl apply -f /etc/flannel.yaml > /tmp/podnetwork-apply.log
  args:
    creates: "{{ kubectl_home }}/.kubeadm-podnetwork-complete"
  when: pod_network_type == "flannel"


# ----------- weave
- name: Apply the weave podnetwork
  shell: >
    kubectl apply -f https://git.io/weave-kube > /tmp/podnetwork-apply.log
  args:
    creates: "{{ kubectl_home }}/.kubeadm-podnetwork-complete"
  when: pod_network_type == "weave"

# ----------- multus
- name: Apply the multus podnetwork from github
  shell: >
    kubectl apply -f https://raw.githubusercontent.com/intel/multus-cni/master/images/flannel-daemonset.yml > /tmp/podnetwork-apply.log && \
    kubectl apply -f https://raw.githubusercontent.com/intel/multus-cni/master/images/multus-daemonset.yml >> /tmp/podnetwork-apply.log
  args:
    creates: "{{ kubectl_home }}/.kubeadm-podnetwork-complete"
  when: 
    - pod_network_type == "multus" or pod_network_type == "multus-2nics"
    - not (multus_build|bool)

# ----------- multus
- name: Apply the multus podnetwork from local
  shell: >
    kubectl create -f /etc/flannel-rbac.yaml > /tmp/podnetwork-apply.log && \
    kubectl apply -f /etc/multus-crd.yaml >> /tmp/podnetwork-apply.log
  args:
    creates: "{{ kubectl_home }}/.kubeadm-podnetwork-complete"
  when:
    - pod_network_type == "multus" or pod_network_type == "multus-2nics"
    - multus_build|bool


# ----------- calico
- name: Apply the calico RBAC
  shell: >
    kubectl apply -f /etc/calico-rbac.yaml
  args:
    creates: "{{ kubectl_home }}/.kubeadm-podnetwork-complete"
  when: pod_network_type == "calico"

- name: Apply the calico podnetwork
  shell: >
    kubectl apply -f /etc/calico.yaml > /tmp/podnetwork-apply.log
  args:
    creates: "{{ kubectl_home }}/.kubeadm-podnetwork-complete"
  when: pod_network_type == "calico"

# ----------- all network types
- name: Mark podnetwork applied
  file:
    path: "{{ kubectl_home }}/.kubeadm-podnetwork-complete"
    state: directory
  when: pod_network_type != "none"

# --------------------------------------------------------------
# --------------- This didn't work because it's not scheduled.
# --------------- because no nodes were joined yet.
# --------------------------------------------------------------
# - name: Wait until the kube-dns pod is up and running
#   shell: >
#     kubectl get pods --all-namespaces | grep -P "kube-dns.+4/4.+Running"
#   register: kube_dns_result
#   until: kube_dns_result.rc == 0
#   retries: 60
#   delay: 3
#   ignore_errors: yes
#   when: pod_network_type != "none"
