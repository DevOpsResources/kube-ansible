---

- name: Create folder for Multus resource defs
  file:
    path: "{{ ansible_env.HOME }}/multus-resources"
    state: directory

- name: Default legacy prefix for Multus
  set_fact:
    multus_legacy_prefix: ""

- name: Set legacy prefix when using legacy version of Multus
  set_fact: 
    multus_legacy_prefix: "legacy."
  when: "multus_legacy"

- name: Set Multus template items
  set_fact:
    multus_template_items:
      - src: crd.yml.j2
        dest: "multus-crd.yml"
      - src: "{{ multus_legacy_prefix }}flannel.yml.j2"
        dest: "flannel.yml"
      - src: "{{ multus_legacy_prefix }}macvlan.yml.j2"
        dest: "macvlan.yml"
      - src: clusterrole.yml.j2
        dest: "clusterrole.yml"
      - src: userspace-ovs.yml
        dest: userspace-ovs.yml
        when: enable_userspace_ovs_cni
      - src: virt-crd.yaml
        dest: virt-crd.yaml
        when: enable_virt_network_device_plugin
      - src: virt-ds.yaml
        dest: virt-ds.yaml
        when: enable_virt_network_device_plugin

- name: Template multus resources
  template:
    src: "{{ item.src }}"
    dest: "{{ ansible_env.HOME }}/multus-resources/{{ item.dest }}"
  with_items: "{{ multus_template_items }}"

- name: Check to see if CRD is present
  shell: >
    kubectl get crd
  register: check_crd

- name: Create network namespace
  set_fact:
    use_network_namespace: "network-attachment-definitions.{{ crd_namespace }}"

- name: Create base CRD
  shell: >
    kubectl create -f {{ ansible_env.HOME }}/multus-resources/multus-crd.yml
  when: "use_network_namespace not in check_crd.stdout"

#- name: Check to see which network CRD definitions are present
#  k8s_raw:
#    kind: NetworkAttachmentDefinition
#    namespace: kube-system
#  register: check_network_crds

- name: Check to see which network CRD definitions are present
  shell: >
    kubectl get network-attachment-definitions
  register: check_network_crds

- name: Create flannel network CRD
  shell: >
    kubectl create -f {{ ansible_env.HOME }}/multus-resources/flannel.yml
  when: "'flannel-conf' not in check_network_crds.stdout"

- name: Create macvlan network CRD
  shell: >
    kubectl create -f {{ ansible_env.HOME }}/multus-resources/macvlan.yml
  when: "'macvlan-conf' not in check_network_crds.stdout"

- name: Create userspace ovs network CRD
  shell: >
    kubectl create -f {{ ansible_env.HOME }}/multus-resources/userspace-ovs.yml
  when: "'userspace-ovs' not in check_network_crds.stdout and enable_userspace_ovs_cni"

- name: Create virt-net network CRD
  shell: >
    kubectl create -f {{ ansible_env.HOME }}/multus-resources/virt-crd.yaml
  when: "'virt-net' not in check_network_crds.stdout and enable_virt_network_device_plugin"

#- name: Create virt-net daemonset
#  shell: >
#    kubectl create -f {{ ansible_env.HOME }}/multus-resources/virt-ds.yaml
#  when: enable_virt_network_device_plugin

- name: Check to see which CRDs are present, for validation
  shell: >
    kubectl get net-attach-def
  register: verify_network_crd

- name: Verify which network CRD definitions are present
  fail: 
    msg: "The {{ item }} CRD was not present."
  when: "item not in verify_network_crd.stdout"
  with_items:
    - 'macvlan-conf'
    - 'flannel-conf'

- name: Get the clusteroles
  shell: >
    kubectl get clusterroles
  register: output_clusterroles

- name: Create clusterrole
  shell: >
    kubectl create -f {{ ansible_env.HOME }}/multus-resources/clusterrole.yml
  when: >
    "multus-crd-overpowered" not in output_clusterroles.stdout

- name: Get the clusterrolebindings
  shell: >
    kubectl get clusterrolebindings
  register: output_crb

- name: Create clusterrolebindings for each machine
  shell: >
    kubectl create clusterrolebinding multus-node-{{ hostvars[item]['inventory_hostname'] }}
    --clusterrole=multus-crd-overpowered
    --user=system:node:{{ hostvars[item]['inventory_hostname'] }}
  with_items:
    - "{{ groups['nodes'] + groups['master'] }}"
  when: >
    "hostvars[item]['inventory_hostname']" not in output_crb.stdout
